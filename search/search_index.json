{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"NGINX Learning Path","text":"<p>Some paths to work with the <code>ngnix docker container</code>:</p> <ul> <li><code>html</code>: <code>/usr/share/nginx/html</code></li> </ul>"},{"location":"foundational.html","title":"Foundational concepts","text":"<p>Exist several OS to work, specially on the Cloud. In this case I am going to use AMI Linux 2023, it uses <code>dnf</code> instead of <code>apt-get</code> like Ubunto or <code>yum</code> like CentOS.</p>"},{"location":"foundational.html#nginx-configuration","title":"NGINX Configuration","text":"<p>We can configure NGINX fast using <code>dnf install -y nginx</code> but, to deep dive into the NGINX details we can configure using the source code. </p> <pre><code>sudo su\ndnf check-update\nwget https://nginx.org/download/nginx-1.28.0.tar.gz\nls -l\ntar -zxvf nginx-1.28.0.tar.gz\ncd nginx-1.28.0\ndnf install -y gcc gcc-c++ make automake autoconf libtool\n./configure\n</code></pre> <p>The <code>./configure</code> command will fail because we do not have all packages.</p> <pre><code>dnf install -y pcre pcre-devel zlib zlib-devel openssl openssl-devel\n./configure\n</code></pre> <p>If you want to know all available commands</p> <pre><code>./configure --help\n</code></pre> <p>To config nginx</p> <p>You can check the documentation here: https://nginx.org/en/docs/ And you can check how builb nginx from sources: https://nginx.org/en/docs/configure.html</p> <pre><code>./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid --with-http_ssl_module\nmake\nmake install\nls -l /etc/nginx/\nnginx -v\n</code></pre> <p>Now, to activate NGINX:</p> <pre><code>ps aux | grep nginx\nnginx\nps aux | grep nginx\n</code></pre> <p>Create the systemd to manage actions like start, stop, restart, reload, start on boot using <code>signal</code></p> <pre><code>ps aux | grep nginx\nnginx -h\nnginx -s stop\nps aux | grep nginx\n</code></pre> <p>If you need to stop nginx</p> <pre><code>sudo pkill -f nginx\n</code></pre>"},{"location":"foundational.html#configure-the-systemctl-command","title":"Configure the systemctl command","text":"<p>You should go to <code>/lib/systemd/system/nginx.service</code> and put this:</p> <pre><code>touch /lib/systemd/system/nginx.service\nnano /lib/systemd/system/nginx.service\n</code></pre> <p>You should put the below script on <code>nginx.service</code></p> <pre><code>[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=syslog.target network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/bin/nginx -t\nExecStart=/usr/bin/nginx\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/bin/kill -s QUIT $MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Now you can start to use systemd</p> <pre><code>systemctl start nginx\nsystemctl status nginx\nsystemctl stop nginx\nsystemctl enable nginx\nsystemctl start nginx\nsystemctl reload nginx\n</code></pre>"},{"location":"foundational.html#nginx-conf-file","title":"NGINX .conf File","text":"<p>The <code>nginx.conf</code> file has two important sections: * context * directive</p> <p>The context refers about sections inside <code>{}</code> and the directive refers about statments like <code>user nginx;</code> or <code>include mime.types;</code></p> <p>Context example:</p> <pre><code>http {\n    index index.html index.htm index.php;\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name mydomain.com;\n    }\n}\n</code></pre> <p>Directive example:</p> <pre><code>user www www;\nworker_processes auto;\n</code></pre>"},{"location":"foundational.html#creating-a-virtual-host","title":"Creating a Virtual Host","text":"<p>You should create and edit some folder and files to contain your <code>html</code>, <code>css</code> and <code>js</code> files.</p> <p>In my case I will use: </p> <ul> <li><code>ls -l /sites/demo/</code>: To configure the static site, maybe you will need to create the folder structure</li> <li><code>ls -l /etc/nginx/nginx.conf</code>: To register the site configuration</li> </ul> <p>About <code>nginx.conf</code> content:</p> <pre><code>events {}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n    }\n}\n</code></pre> <p>After changes we will need to validate the changes and start nginx again</p> <pre><code>nginx -t\nsystemctl reload nginx\n</code></pre>"},{"location":"foundational.html#nginx-location-contents","title":"NGINX Location Contents","text":"<ul> <li>Exact Match = </li> <li>Preferential Prefix Match ^~</li> <li>REGEX Match ~*</li> <li>Prefix Match</li> </ul> <pre><code>events {}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n\n        # Exact Match\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n\n        # REGEX match - case sensitive\n        # location ~ /greet[0-9] {\n\n        #     return 200 'Hello from NGINX \"/greet\" location - REGEX MATCH';\n        # }\n\n        # REGEX match - case insensitive\n        # location ~* /greet[0-9] {\n\n        #     return 200 'Hello from NGINX \"/greet\" location - REGEX MATCH INSENSITIVE';\n        # }\n\n        # Prefix match\n        # location /greet {\n\n        #     return 200 'Hello from NGINX \"/greet\" location.';\n        # }\n    }\n}\n</code></pre>"},{"location":"foundational.html#nginx-variables","title":"NGINX Variables","text":"<ul> <li>Nginx variables: https://nginx.org/en/docs/varindex.html</li> </ul> <pre><code>events {}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n\n        # Check static API key\n        # if ( $arg_apikey != 1234 ) {\n        #     return 401 \"Incorrect API Key\";\n        # }\n\n        # Variable\n        set $weekend 'No';\n\n        # Check if weekend\n        if ( $date_local ~ 'Saturday|Sunday' ){\n            set $weekend 'Yes';\n        }\n\n        location = /inspect {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 \"{\\\"host\\\": \\\"$host\\\", \\\"uri\\\": \\\"$uri\\\", \\\"name\\\": \\\"$arg_name\\\", \\\"Date Local\\\": \\\"$date_local\\\", \\\"is_weekend\\\":\\\"$weekend\\\", \\\"args\\\": \\\"$args\\\"}\";\n        }\n\n        # Exact Match\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n\n        # REGEX match - case sensitive\n        # location ~ /greet[0-9] {\n\n        #     return 200 'Hello from NGINX \"/greet\" location - REGEX MATCH';\n        # }\n\n        # REGEX match - case insensitive\n        # location ~* /greet[0-9] {\n\n        #     return 200 'Hello from NGINX \"/greet\" location - REGEX MATCH INSENSITIVE';\n        # }\n\n        # Prefix match\n        # location /greet {\n\n        #     return 200 'Hello from NGINX \"/greet\" location.';\n        # }\n    }\n}\n</code></pre>"},{"location":"foundational.html#nginx-rewrites-and-returns","title":"NGINX Rewrites and Returns","text":"<ul> <li>rewrite pattern URI -&gt; maintain your uri<ul> <li>The requests are re-evaluated</li> <li>Some examples:<ul> <li><code>rewrite ^/user/\\w+ /greet;</code></li> <li><code>rewrite ^/user/{\\w+} /greet/$1;</code></li> </ul> </li> <li><code>last</code>:<ul> <li><code>rewrite ^/user/{\\w+} /greet/$1 last;</code></li> <li><code>rewrite ^/user/{\\w+} /thumb.png;</code></li> </ul> </li> </ul> </li> <li>return status URI -&gt; change your uri</li> </ul>"},{"location":"foundational.html#nginx-try-files","title":"NGINX Try Files","text":"<ul> <li>Remember that you can use <code>named_locations</code></li> </ul> <pre><code>events {}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n\n        # try_files $uri $uri/ /404;\n\n        # location = /404 {\n        #     return 404 'Sorry, this page or file does not exist.';\n        # }\n\n        try_files $uri $uri/ @404;\n\n        location @404 {\n            return 404 'Sorry, this page or file does not exist.';\n        }\n\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n    }\n}\n</code></pre>"},{"location":"foundational.html#nginx-logs","title":"NGINX Logs","text":"<ul> <li>Error Log</li> <li>Access Log</li> <li>In my case <code>ls -l /var/log/nginx/</code></li> <li><code>access_log off;</code></li> </ul> <pre><code>ls -l /var/log/nginx/\ncd /var/log/nginx\necho '' &gt; access.log\necho '' &gt; error.log\ncat error.log\n</code></pre> <p>Another way to check logs</p> <pre><code>tail -n 1 /var/log/nginx/error.log\n</code></pre> <pre><code>events {}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        try_files $uri $uri/ @404;\n\n        location @404 {\n            access_log /var/log/nginx/404.access.log;\n            return 404 'Sorry, this page or file does not exist.';\n        }\n\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n    }\n}\n</code></pre>"},{"location":"foundational.html#nginx-inherentance-and-directives","title":"NGINX Inherentance and directives","text":"<ul> <li>Array Directive</li> <li>Standard Directive</li> <li>Action Directive</li> </ul>"},{"location":"foundational.html#php-processing","title":"PHP Processing","text":"<p>We can use php-fpm</p> <pre><code>dnf check-update\ndnf install php-fpm\nwhich php-fpm\nsystemctl list-unit-files | grep php\nsystemctl enable php-fpm\nsystemctl start php-fpm\nsystemctl status php-fpm\nfind / -name *www.sock\necho '&lt;?php phpinfo(); ?&gt;' &gt; /sites/demo/info.php\necho '&lt;h1&gt; Date: &lt;?php echo date(\"l jS F\"); ?&gt;&lt;/h1&gt;' &gt; /sites/demo/index.php\n</code></pre> <p>To deal with the basic interactions <code>index index.php index.html;</code></p> <pre><code>user nginx;\nworker_processes auto;\n\nevents {\n    worker_connections 65535;\n}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        index index.php index.html;\n\n        location / {\n            try_files $uri $uri/ @404;\n        }\n\n        location ~\\.php$ {\n            include fastcgi.conf;\n            fastcgi_pass unix:/run/php-fpm/www.sock;\n        }\n\n        location @404 {\n            access_log /var/log/nginx/404.access.log;\n            return 404 'Sorry, this page or file does not exist.';\n        }\n\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n    }\n}\n</code></pre>"},{"location":"foundational.html#nginx-worker-processes","title":"NGINX Worker Processes","text":"<p><code>systemctl status nginx</code></p> <ul> <li>Check additional information:<ul> <li><code>nproc</code></li> <li><code>lscpu</code></li> <li><code>ulimit -n</code></li> </ul> </li> <li>Total connections:<ul> <li>worker_processes x worker_connections = max_connections</li> </ul> </li> <li>If you need to change you pid file<ul> <li><code>pid /var/run/new_nginx.pid</code></li> </ul> </li> </ul> <pre><code>user nginx;\nworker_processes auto;\n\nevents {\n    worker_connections 65535;\n}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        try_files $uri $uri/ @404;\n\n        location @404 {\n            access_log /var/log/nginx/404.access.log;\n            return 404 'Sorry, this page or file does not exist.';\n        }\n\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n    }\n}\n</code></pre>"},{"location":"foundational.html#nginx-buffers-and-timeouts","title":"NGINX Buffers and Timeouts","text":"<p>Buffering is the amount of data to save before to realese that amount.</p> <pre><code>user nginx;\nworker_processes auto;\n\nevents {\n    worker_connections 65535;\n}\n\nhttp {\n    include mime.types;\n\n    # Buffer size for POST submissions\n    client_body_buffer_size 10K;\n    client_max_body_size 8m;\n\n    # Buffer size for Headers\n    client_header_buffer_size 1K;\n\n    # Max time to receive client headers/body (milliseconds)\n    client_body_timeout 12;\n    client_header_timeout 12;\n\n    # Max time to keep a connection open for\n    keepalive_timeout 60s;\n\n    # Max time for the client accept/receive a response\n    send_timeout 60s;\n\n    # Skip buffering for static files\n    sendfile on;\n\n    # Optimise sendfile packets\n    tcp_nopush on;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        try_files $uri $uri/ @404;\n\n        location @404 {\n            access_log /var/log/nginx/404.access.log;\n            return 404 'Sorry, this page or file does not exist.';\n        }\n\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n    }\n}\n</code></pre>"},{"location":"foundational.html#nginx-modules","title":"NGINX Modules","text":"<ul> <li>Add new modules like: SSL, pagespeed</li> <li>In the folder where you started the configuration type <code>nginx -V</code> and you'll get something like this:<ul> <li><code>--sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid --with-http_ssl_module</code></li> </ul> </li> <li>Adding the new modules (http_image_filter_module=dynamic)</li> </ul> <pre><code>./configure --help\n./configure --help | grep dynamic\ndnf install gd gd-devel\n./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid --with-http_ssl_module --with-http_image_filter_module=dynamic --modules-path=/etc/nginx/modules\nmake\nmake install\n</code></pre>"},{"location":"load_balancing.html","title":"Reverse Proxy and Load Balancing","text":""},{"location":"load_balancing.html#reverse-proxy","title":"Reverse proxy","text":"<ul> <li>Act as resource between the client and the server</li> <li>Interpret the client request and push it to the php server (for example)</li> <li>Parsing custom headers</li> </ul>"},{"location":"load_balancing.html#load-balancer","title":"Load Balancer","text":"<ul> <li>Distribuite or redirect the load</li> <li>Provide redundance</li> <li>The module for load balancer is <code>ngx_http_upstream_module</code></li> <li>Round Robin: The next in the queue is the next server</li> <li>Sticky Sessions: <code>ip hash;</code></li> <li>You can not reach and active server <code>least_conn;</code></li> </ul> <pre><code>events {}\n\nhttp {\n    upstream php_servers{\n        ip_hash;\n        server localhost:10001;\n        server localhost:10002;\n        server localhost:10003;\n    }\n\n    server {\n        listen 8888;\n\n        location / {\n            proxy_pass http://php_servers;\n        }\n    }\n}\n</code></pre>"},{"location":"performance.html","title":"Performance","text":""},{"location":"performance.html#headers-and-expires","title":"Headers and Expires","text":"<ul> <li>How long the browser cache the information or resources</li> </ul> <pre><code>user nginx;\nworker_processes auto;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name api.development.janobourian.com.mx;\n        return 301 return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        try_files $uri $uri/ @404;\n\n        location @404 {\n            access_log /var/log/nginx/404.access.log;\n            return 404 'Sorry, this page or file does not exist.';\n        }\n\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n\n        location ~* \\.(css|js|jpg|png)$ {\n            access_log off;\n            add_header Cache-Control public;\n            add_header Pragma public;\n            add_header Vary Accept-Encoding;\n            expires 1M;\n        }\n    }\n}\n</code></pre>"},{"location":"performance.html#compressed-responses-with-gzip","title":"Compressed Responses with gzip","text":"<ul> <li>To compress the response to reduce the response.</li> </ul> <pre><code>user nginx;\nworker_processes auto;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    include mime.types;\n    gzip on;\n    gzip_com_level 3;\n    gzip_types text/css;\n    gzip_types text/javascript;\n\n    server {\n        listen 80;\n        server_name api.development.janobourian.com.mx;\n        return 301 return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443;\n        root /sites/demo;\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        try_files $uri $uri/ @404;\n\n        location @404 {\n            access_log /var/log/nginx/404.access.log;\n            return 404 'Sorry, this page or file does not exist.';\n        }\n\n        location = /api/health {\n            default_type application/json;\n            add_header Content-Type application/json;\n            return 200 '{\"status\": \"ok\"}';\n        }\n\n        location ~* \\.(css|js|jpg|png)$ {\n            access_log off;\n            add_header Cache-Control public;\n            add_header Pragma public;\n            add_header Vary Accept-Encoding;\n            expires 1M;\n        }\n    }\n}\n</code></pre>"},{"location":"performance.html#fastcgi-cache","title":"FastCGI Cache","text":"<ul> <li>In order to avoid server side language processes</li> </ul> <pre><code>events {}\n\nhttp {\n    ...\n    fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=10m;\n    fastcgi_cache_key \"$scheme$request_method$host$request_uri\";\n    add_header X-Cache $upstream_cache_status;\n    ...\n\n    server {\n        ...\n        set $no_cache=0;\n        if ( $arg_skipcache = 1 ) {\n            set $no_cache 1;\n        }\n        ...\n        location ~\\.php$ {\n            fastcgi_cache ZONE_1;\n            fastcgi_cache_valid 200 60m;\n            fastcgi_cache_valid 404 10m;\n            fastcgi_cache_bypass $no_cache;\n            fastcgi_no_cache $no_cache;\n        }\n        ...\n    }\n}\n</code></pre>"},{"location":"performance.html#http2","title":"HTTP2","text":"<ul> <li>Binary Protocol</li> <li>HTTP1 was Text Protocol</li> <li>Compressed Headers</li> <li>Persistent Connections</li> <li>Multiplex Streaming</li> <li>Server Push</li> <li>HTTP2 is only avaiable with SSl</li> </ul> <p>How to install</p> <pre><code>pwd\ncd /home/ec2-user\nls -l\ncd nginx-1.28.0\n./configure --help\n./configure --help | grep http_v2\n./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid --with-http_ssl_module --with-http_image_filter_module=dynamic --with-http_v2_module --modules-path=/etc/nginx/modules\nmake\nmake install\nsystemctl restart nginx\n</code></pre>"},{"location":"performance.html#server-push","title":"Server Push","text":"<ul> <li>Library: https://nghttp2.org</li> <li>Example: https://www.f5.com/company/blog/nginx/nginx-1-13-9-http2-server-push</li> </ul> <p>The goal is receive some files with another file, for example when <code>/index.html</code> is requested you will receive other files such as <code>/styles.css</code></p> <pre><code>location = /index.html {\n    http2_push /style.css;\n    http2_push /image.png;\n}\n</code></pre>"},{"location":"production.html","title":"Go to Production","text":""},{"location":"production.html#pre-requirements","title":"Pre-requirements","text":"<ul> <li>Buy a custom domain using some service like GoDaddy, Hostinger, and so on. </li> <li>Create the Public Hosted Zone on Route53</li> <li>Connect Route53 with your current domain provider.</li> <li>Create an EC2 instance using Amazon Linux 2023</li> <li>Request a Public Elastic IP</li> <li>Connect the instance IP with the Public Elastic IP</li> <li>Connect the subdomain on Route53 with our current Public Elastic IP</li> </ul>"},{"location":"production.html#the-ssl-process","title":"The SSL process","text":""},{"location":"production.html#configure-the-certonly-process","title":"Configure the certonly process","text":"<pre><code>sudo su\ndnf check-update\ndnf install certbot\ncertbot certonly\n</code></pre>"},{"location":"production.html#install-and-configure-nginx","title":"Install and configure Nginx","text":"<pre><code>dnf update -y\ndnf install -y nginx\n</code></pre> <p>The encrypt files are: * <code>/etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem</code> * <code>/etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem</code></p>"},{"location":"production.html#update-the-corresponding-files","title":"Update the corresponding files","text":""},{"location":"production.html#general-config-etcnginxnginxconf","title":"General config /etc/nginx/nginx.conf","text":"<p>Steps to configure</p> <pre><code>rm -f /etc/nginx/nginx.conf\nnano /etc/nginx/nginx.conf\nnginx -t\nsystemctl status nginx\nsystemctl enable nginx\nsystemctl start nginx\n</code></pre> <p>The *.conf file for this configuration</p> <pre><code>events {}\n\nhttp {\n    include mime.types;\n\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        index index.html;\n\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n\n        location / {\n            try_files $uri $uri/ =404;\n        }   \n\n    }\n}\n</code></pre>"},{"location":"production.html#specific-config-etcnginxconfdconf","title":"Specific config /etc/nginx/conf.d/*.conf","text":"<p>In some cases we need to configure a specific file for specific domain. </p> <pre><code>rm -f /etc/nginx/conf.d/&lt;DOMAIN&gt;.conf\nnano /etc/nginx/conf.d/&lt;DOMAIN&gt;.conf\nnginx -t\nsystemctl enable nginx\nsystemctl start nginx\n</code></pre> <p>The configuration inside that file should have only <code>server</code> context.</p> <p>For <code>/etc/nginx/nginx.conf</code></p> <pre><code>user nginx;\nworker_processes auto;\n\nevents {\n    worker_connections 65535;\n}\n\nhttp {\n    include       mime.types;\n    include /etc/nginx/conf.d/*.conf;\n}\n</code></pre> <p>For <code>/etc/nginx/conf.d/&lt;DOMAIN&gt;.conf</code></p> <pre><code>server {\n    listen 80;\n    server_name &lt;DOMAIN&gt;;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n    server_name &lt;DOMAIN&gt;;\n    root /sites/demo;\n    index index.html;\n\n    ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    location / {\n        try_files $uri $uri/ =404;\n    }   \n\n}\n</code></pre>"},{"location":"security.html","title":"Security","text":""},{"location":"security.html#https-ssl","title":"HTTPS (SSL)","text":"<ul> <li>http is an insecure protocol</li> <li>https is a secure connections</li> <li>ports:<ul> <li>21: FTP</li> <li>22: SSH</li> <li>22: SFTP</li> <li>80: HTTP</li> <li>443: HTTPS</li> </ul> </li> </ul> <pre><code>events {}\n\nhttp {\n    server {\n        listen 80;\n        server_name &lt;DOMAIN&gt;;\n        return 301 https://$host$request_uri;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name &lt;DOMAIN&gt;;\n        root /sites/demo;\n        index index.html;\n\n        ssl_certificate /etc/letsencrypt/live/&lt;DOMAIN&gt;/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/&lt;DOMAIN&gt;/privkey.pem;\n\n        # Disable SSL\n        ssl_protocols TLSv1.2 TLSv1.3;\n        # Optimise cipher suits\n        ssl_prefer_server_ciphers on;\n        ssl_ciphers HIGH:!aNULL:!MD5;\n        # Enable DH Params\n        ssl_dhparam /etc/nginx/ssl/dhparam.pem;\n        # Enable HSTS\n        add_header Strict-Transport-Security \"max-age-3153600\" always;\n        # SSL sessions\n        ssl_session_cache shared:SSL:40m;\n        ssl_session_timeout 4h;\n        ssl_session_tickets on;\n\n        location / {\n            try_files $uri $uri/ =404;\n        }   \n    }\n}\n</code></pre>"},{"location":"security.html#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Managing incoming requests</li> <li>Reasons:<ul> <li>Security - Brute Force Protection</li> <li>Reliability - Prevent Traffic Spikes</li> <li>Shaping - Service Priority</li> </ul> </li> <li><code>Siege</code> is a tool to measure the traffic<ul> <li>Load Testing Tool</li> </ul> </li> <li>1r/s + 5 burts = 6 connections</li> </ul>"},{"location":"security.html#basic-auth","title":"Basic Auth","text":"<ul> <li>First we need a password <code>htpasswd -c /etc/nginx/.htpasswd user1</code> </li> <li>Now you should add the password<ul> <li><code>auth_basic \"Secure Area\";</code></li> <li><code>auth_basic_user_file /etc/nginx/.htpasswd;</code></li> </ul> </li> </ul>"},{"location":"security.html#hardering-nginx","title":"Hardering NGINX","text":"<ul> <li>You can remove the nginx version from the response after <code>cUrl</code> request</li> <li>You can prevent to embed your website in other webpages using <code>iframe</code> html tag<ul> <li><code>add_header X-Frame-Options \"SAMEORIGIN\";</code></li> <li><code>add_header X-XSS-Protection \"1; mode=block\";</code></li> </ul> </li> <li>Remove unused and potential risk modules</li> </ul>"},{"location":"security.html#lets-encrypt-ssl-certificates","title":"Let's Encrypt - SSL Certificates","text":"<ul> <li>You can use the indicated tools on the <code>production</code> section on this documentation  </li> </ul>"},{"location":"amazon_q/index.html","title":"Amazon Q","text":"<p>Amazon Q is an AI-powered assistant that helps developers build, deploy, and manage applications on AWS.</p>"},{"location":"amazon_q/index.html#overview","title":"Overview","text":"<p>Amazon Q provides intelligent code suggestions, answers questions about AWS services, and helps with troubleshooting.</p>"},{"location":"amazon_q/advanced_features.html","title":"Advanced Features","text":"<p>Explore advanced capabilities and features of Amazon Q.</p>"},{"location":"amazon_q/advanced_features.html#advanced-configuration","title":"Advanced Configuration","text":"<p>Learn about advanced settings and customization options for Amazon Q.</p>"},{"location":"amazon_q/creating_a_bot.html","title":"Creating a Bot with Amazon Q","text":"<p>Guide to creating and configuring bots using Amazon Q.</p>"},{"location":"amazon_q/creating_a_bot.html#bot-configuration","title":"Bot Configuration","text":"<p>Steps to set up and customize your Amazon Q bot for specific use cases.</p>"},{"location":"amazon_q/getting_started.html","title":"Getting Started with Amazon Q","text":"<p>Learn how to set up and start using Amazon Q for your development workflow.</p>"},{"location":"amazon_q/getting_started.html#installation","title":"Installation","text":"<p>Instructions for installing Amazon Q in your IDE or development environment.</p>"},{"location":"assembly_language/index.html","title":"Assembly Language","text":""},{"location":"assembly_language/index.html#important-links","title":"Important Links","text":"<ul> <li>Tutorial for beginners</li> <li>8086 Compiler</li> </ul>"},{"location":"aws_nag/index.html","title":"AWS Nag","text":"<p>AWS Nag is a tool for identifying and fixing security and compliance issues in CDK applications.</p>"},{"location":"aws_nag/index.html#overview","title":"Overview","text":"<p>Learn how to use AWS Nag to improve the security posture of your infrastructure code.</p>"},{"location":"aws_nag/best_practices.html","title":"Best Practices","text":"<p>Best practices for using AWS Nag effectively in your development workflow.</p>"},{"location":"aws_nag/best_practices.html#recommendations","title":"Recommendations","text":"<p>Guidelines for integrating AWS Nag into your CI/CD pipeline and development process.</p>"},{"location":"aws_nag/setup_and_installation.html","title":"Setup and Installation","text":"<p>How to install and configure AWS Nag in your CDK project.</p>"},{"location":"aws_nag/setup_and_installation.html#installation-steps","title":"Installation Steps","text":"<p>Step-by-step guide to setting up AWS Nag for your infrastructure code analysis.</p>"},{"location":"aws_nag/usage.html","title":"Usage","text":"<p>How to use AWS Nag to analyze your CDK code for security and compliance issues.</p>"},{"location":"aws_nag/usage.html#running-analysis","title":"Running Analysis","text":"<p>Commands and configuration options for running AWS Nag analysis.</p>"},{"location":"aws_sns/index.html","title":"AWS SNS","text":"<p>Amazon Simple Notification Service (SNS) is a messaging service for application-to-application communication.</p>"},{"location":"aws_sns/index.html#overview","title":"Overview","text":"<p>Learn how to use AWS SNS for pub/sub messaging and notifications in your applications.</p>"},{"location":"aws_sns/getting_started.html","title":"Getting Started with AWS SNS","text":"<p>Introduction to AWS SNS and how to set up your first topic.</p>"},{"location":"aws_sns/getting_started.html#creating-topics","title":"Creating Topics","text":"<p>How to create and configure SNS topics for your messaging needs.</p>"},{"location":"aws_sns/publishing_messages.html","title":"Publishing Messages","text":"<p>How to publish messages to SNS topics using various methods.</p>"},{"location":"aws_sns/publishing_messages.html#message-publishing","title":"Message Publishing","text":"<p>Different ways to send messages through SNS topics to subscribers.</p>"},{"location":"aws_sns/subscribing_to_topics.html","title":"Subscribing to Topics","text":"<p>How to create and manage subscriptions to SNS topics.</p>"},{"location":"aws_sns/subscribing_to_topics.html#subscription-management","title":"Subscription Management","text":"<p>Setting up different types of subscriptions (email, SMS, HTTP, etc.) for SNS topics.</p>"},{"location":"aws_sns/troubleshooting.html","title":"Troubleshooting","text":"<p>Common issues and solutions when working with AWS SNS.</p>"},{"location":"aws_sns/troubleshooting.html#common-problems","title":"Common Problems","text":"<p>Troubleshooting guide for SNS delivery failures, permission issues, and configuration problems.</p>"},{"location":"bash_scripting/index.html","title":"Index","text":""},{"location":"bash_scripting/index.html#documentations-for-this-learning-path","title":"Documentations for this learning path","text":"<ul> <li>devhints</li> <li>Learn in minutes</li> <li>Bash Guide</li> </ul>"},{"location":"bash_scripting/commands.html","title":"Commands to start with bash scripting","text":"<p>You can check the command list for your OS here</p>"},{"location":"bash_scripting/commands.html#command-list","title":"Command list","text":"<ul> <li><code>uname</code> to have information about the operating system</li> <li><code>pwd</code> Print Working Directory</li> <li><code>cd</code></li> <li><code>ls</code></li> <li><code>ls -l</code></li> <li><code>cat &lt;filename&gt;</code> print the file content</li> <li><code>|</code> pipe allows chained other commands</li> <li><code>grep</code> display only specific information</li> <li><code>&gt;</code> redirection to an output file</li> <li><code>cp</code></li> <li><code>wc</code> word count command used to count the number of lines, words, characters in a file or standard input</li> </ul>"},{"location":"bash_scripting/commands.html#examples","title":"Examples","text":"<ul> <li><code>cat application.log | grep ERROR | wc -l</code></li> </ul>"},{"location":"bash_scripting/introduction.html","title":"Introduction","text":""},{"location":"bash_scripting/introduction.html#overview","title":"Overview","text":""},{"location":"bash_scripting/introduction.html#commond-pre-defined-variables","title":"Commond pre-defined variables","text":"<ul> <li>HOME</li> <li>PATH</li> <li>LOGNAME</li> <li>SHELL</li> <li>TERM</li> <li>PPID</li> <li>PWD</li> <li>OLDPWD</li> <li>RANDOM</li> <li>PS1</li> <li>PS2</li> <li><code>date</code></li> <li><code>man bash</code></li> <li><code>nano script.sh</code></li> <li><code>grep</code></li> <li><code>tail</code></li> <li><code>ifconfig</code></li> </ul>"},{"location":"bash_scripting/introduction.html#commands","title":"Commands","text":"<ul> <li><code>sudo [chown] [user:group] file_name</code> - Change permissions</li> <li><code>chmod (a, u, g, o) (+, -) (r, w, x) file_name</code> - Asign permissions</li> <li><code>echo \"Hello world\" &gt; fichero.txt</code></li> <li><code>python3 main.py &gt; fichero.txt</code></li> </ul>"},{"location":"cloud_application_architecture_patterns/index.html","title":"Cloud Application Architecture Patterns","text":""},{"location":"cloud_application_architecture_patterns/index.html#list-of-patterns-and-concepts","title":"List of Patterns and Concepts","text":"<ul> <li>Adapter Microservices: How can the application take advantage of existing functionlity without abandoning the microservices approach?</li> <li>Aggregate: How do you tie together the groups of tightly related concepts and the values that belong within them in a subdomain?</li> <li>Anti-Corruption Layer: How can we design the system so that the Bounded Contexts (BCs) can interact without being tightly coupled together?</li> <li>Application Database: How should a cloud-native application store the data it uses so that it can run as a stateless application?</li> <li>Application Package: What features of a computer language ecosystem are required to implement a Cloud Application?</li> <li>Backend Service: How can multiple applications share the same reusable functionality?</li> <li>Big Ball of mud: What is the simplest possible architecture for an application that helps get something working quickly to get needed feedback?</li> <li>Bounded Context: How do you clearly define the logical boundaries (edges) of a domain and subdomain(s) where particular terms and rules apply?</li> <li>Browser Application: What is the easiest, most universal Client Application for any user that does not assume specific hardware or software configuration?</li> <li>Client Application: How can I build applications to take advantage of the services provided by an application running in the cloud?</li> <li>Cloud Application: How can I build applications to take the maximum advantage of all the features of the cloud for best future proofing and agility?</li> <li>Cloud Database: How should a cloud-native application store data persistently in a cloud environment?</li> <li>Cloud-Native Architecture: How can I architect an application to take maximum advantage of the cloud platform it will run on?</li> <li>Columnar Database: How can an application most efficiently store data for performing analytics, such as in a data warehouse?</li> <li>Command-line Interface: How can an end user automate activities like bulk loads, bulks changes, or schedukle execution of activities using the services provided by an application running in the cloud?</li> <li>Command Query Responsibility Segregation (CQRS): How do you optimize throughput for query and updates by multiple clients that have numerous cross-cutting views of the data?</li> <li>Configuration Database: How can a cloud service store its service state such that all of the nodes in the services can share and access state?</li> <li>Containerize the Application: How can an application be packaged to facilitate greater deployment density and platform portability?</li> <li>Data Module: How can I align my data model with my application model so that both are easier to maintain and can evolve quickly?</li> <li>Databse-as-a-Service: Hoe does an application have access to an Application Database?</li> <li>Dispatcher: How can a client access a microservices application through a channel-specific service interface when the business functionality is spread across an evolving set of domain-specific APIs?</li> <li>Distributed Architecture: How can I architect my application so that parts of it can be developed, deployed, and run independently?</li> <li>Document Database: How can and application most efficiently store and retrieve data when the future structure of the data is not well known?</li> <li>Domain Event: How do you moidel those aspects of a design that correspond to things that happen during the various scenario encountered by the system?</li> <li>Domain Microservice: How should a set of microservices in an architecture provide the business functionality for an application?</li> <li>Domain Service: How do you model those operations within a subdomain that do not belong to a specific Entity or Aggregate?</li> <li>Event: How do you represent a change in one component to be communicated to other components?</li> <li>Event API: How can the reactive components in an event-driven architecture know what events to expect?</li> <li>Event Backbone: How can reactive components receive the event they are interested in without being coupled directly to the event notifiers that generate the events?</li> <li>Event Choreography: When a change ocurrs in one component, how can a variable number of other components react accordingy?</li> <li>Event Notifier: How and when shpuld a component announce changes to other components?</li> <li>Event Sourcing: As an application's state changes constantly and unpredictably due to evolving conditions, how can you audit the history that created the current state?</li> <li>Event Storming: How do you get the stakeholders to understand and describe the elements and event arouund the domain and subdomain?</li> <li>External Configuration: How can I build my application once and yet be able to deploy it to multiple environments that are configured differently?</li> <li>Extract Component: How do you separate loosely related parts of the code in our monolith into distinct deployable units?</li> <li>Graph Database: How can an application most efficiently store and retrieve interrelated data entities by navitating their relationships?</li> <li>Hairline Cracks: How do you identify the areas within a monolith application that are candidate boundaries for microservices?</li> <li>Interaction Model: How do yo avoid mixing business and presentation logic inside your Client application?</li> <li>Key-value Database: How can an application most efficiently store and retrieve independent data entities thar are always looked up by the same key?</li> <li>Lift and shift: What is the simplest possible way to move an existing application to the cloud?</li> <li>Micro Frontend: How do you avoid creating a monolithic Single-Page application by placing too much functionality in a common front-end?</li> <li>Microservices: How do you architect an application as a set of interconnected modules that can be developed independently?</li> <li>Mobile Application: How do you provide the most optimized user experience on a mobile device and take advantage of the features that make mobile computing unique?</li> <li>Model Around the Domain: How can you encourage stakeholders to explain enough of the domain requirements in a way that reveals the relevant capabilities for the application you are building?</li> <li>Modular Monolith: How can I architect my application to make it easier to maintain anf evolve quickly?</li> <li>New Features as Microservices: While strangling a monolith, how do ypu avoid adding new functionality to the monolith that will later have to be modernized into microservices?</li> <li>Pave the road: How can we encourage teams to move to the cloud and adopt these new technologies without letting each team go in their own direction and work at cross purposes?</li> <li>Playback testing: How do you ensure that the new microservices architecture maintains the same functionality as the old monolithic system, especially when the amount of detailed end-to-end application knowledge of the existing application may be limited?</li> <li>Polyglot Persistence: How can an application store its Data Modelues in the type of database that works best for the application's data structure and how it accesses the data?</li> <li>Polyglot Development: What computer language(s) should be used for implementing microservices?</li> <li>Public API: How do you best enable third-party applications to interact programmatically with a Cloud Application?</li> <li>Reactive Component: How can you construct an application that can react to events?</li> <li>Refactor the Monolith: How can I make an existing application easier for multiple trams to maintain and able to run effectively in a multi-computer environment?</li> <li>Refactor the Extract: How do we address coupling within the moniolith to facilitate extraction into microservices?</li> <li>Relation Database: How can an application store well-structured data that it needs to query dynamically?</li> <li>Replace as Microservice: How can we move complex and important pieces of functionality that are tightlyu coupled in the monolith to microservices with minimal impact?</li> <li>Replicable application: How can an application run reliably on an unreliable platform and scale to handle greater client load the way the platform scales?</li> <li>Replicated Database: How can a Cloud Database provide the same quality of service as a cloud-native application with the same availability, scalability, and performance as the application?</li> <li>Repositories: How do we address coupling within the monolith to facilitate extraction into microservices?</li> <li>Self-Managed Data Store: How does a microservice store its state?</li> <li>Service API: How should an application expose its functionality to clients that want to use the application?</li> <li>Service Orchestator: How does a microservice perfor a complex task, one that is performed in multiple steps?</li> <li>Single-Page application: How do you desing the front ed of your application to provide the best mix of client responsiveness and server optimization?</li> <li>Smart Small: How can we start adopting cloud services and moving existing application to the cloud or writing applications for the cloud, possibly using microservices?</li> <li>Stateless Application: How can an application support concurrent requests efficiently and reover from failures without losing data?</li> <li>Strangle the Monolith: How can we replace a monolithic architecture with a microservice architecture while reducing overall risk?</li> <li>Transform Monolith into microservices: How do you kieep tje monolithic system working while you substiture piece of functionality with microservices over time?</li> <li>Virtualize the application What is the simpliest possible way to package an application so that it can easily be deployed to traditional IT or to the cloud?</li> <li>Web Form application: How do you build a user interface to provide basic functionality to the largest possible set of users using the largest set of devices and hardware.</li> </ul>"},{"location":"cloud_application_architecture_patterns/application_architecture.html","title":"Application Architecture","text":""},{"location":"cloud_application_architecture_patterns/application_migration_and_modernization.html","title":"Application Migration and Modernization","text":""},{"location":"cloud_application_architecture_patterns/cloud_application_clients.html","title":"Cloud Application Clients","text":""},{"location":"cloud_application_architecture_patterns/cloud_applications.html","title":"Cloud Applications","text":""},{"location":"cloud_application_architecture_patterns/cloud_native_application.html","title":"Cloud-Native Application","text":""},{"location":"cloud_application_architecture_patterns/cloud_native_storage.html","title":"Cloud-Native Storage","text":""},{"location":"cloud_application_architecture_patterns/event_driven_architecture.html","title":"Event-Driven Architecture","text":""},{"location":"cloud_application_architecture_patterns/microservices_architecture.html","title":"Microservices Architecture","text":""},{"location":"cloud_application_architecture_patterns/microservices_design.html","title":"Microservices Design","text":""},{"location":"cloud_application_architecture_patterns/strangling_monoliths.html","title":"Strangling Monoliths","text":""},{"location":"dms-aws/index.html","title":"Workshop","text":"<p>You can check the workshop here: https://catalog.workshops.aws/databasemigration/en-US</p>"},{"location":"dms-aws/index.html#introduction","title":"Introduction","text":"<p>Maybe the most complex steps before and during migrations are the <code>Schema Conversion</code> and <code>Data Migraion</code> itself. This is the context for both tasks.</p>"},{"location":"dms-aws/index.html#schema-conversion","title":"Schema Conversion","text":"<ul> <li>You can use <code>AWS DMS Schema Conversion (AWS SC) with Generative AI</code>.</li> <li>AWS recommends customers doing conversions from commercial database to open source databases.</li> </ul>"},{"location":"dms-aws/index.html#data-migration","title":"Data Migration","text":"<ul> <li>The source database remains fully operational during the migration.</li> <li>The goal is minimizing downtime to applications that rely on the database.</li> </ul>"},{"location":"dms-aws/dms-source.html","title":"Select your DMS Source","text":""},{"location":"dms-aws/dms-source.html#steps","title":"Steps","text":"<ul> <li>You can use <code>Fleet Manager</code> in <code>System Manager</code> to connect you with the RDP client</li> <li>Configure the SQL Database with:<ul> <li>Server Type: Database Engine</li> <li>Server Name: localhost</li> <li>Authorization: Windows Authentication</li> <li>Encryption: Optional</li> </ul> </li> <li>Execute the SQL Server Query</li> </ul> <pre><code>--Set master database context\nuse [master]\nGO\n\n\n--Add the awssct login to the sysadmin server role - required for replication\nALTER SERVER ROLE [sysadmin] ADD MEMBER [dbadmin]\nGO\n\n--Set the recovery model to full for dms_sample - required for replication\nALTER DATABASE [dms_sample] SET RECOVERY FULL WITH NO_WAIT\nGO\n\n--Configure this SQL Server as its own distributor\nexec sp_adddistributor @distributor = @@SERVERNAME, @password = N'Password1'\nexec sp_adddistributiondb @database = N'distribution', @data_folder = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL16.MSSQLSERVER\\MSSQL\\DATA', @log_folder = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL16.MSSQLSERVER\\MSSQL\\DATA', @log_file_size = 2, @min_distretention = 0, @max_distretention = 72, @history_retention = 48, @security_mode = 1\nGO\n\nRECONFIGURE\ngo \n\n--Change context to the distribution database\nuse [distribution] \nGO\n\n--Configure replication\nif (not exists (select * from sysobjects where name = 'UIProperties' and type = 'U ')) \n    create table UIProperties(id int) \n\nif (exists (select * from ::fn_listextendedproperty('SnapshotFolder', 'user', 'dbo', 'table', 'UIProperties', null, null))) \n    EXEC sp_updateextendedproperty N'SnapshotFolder', N'C:\\Program Files\\Microsoft SQL Server\\MSSQL16.MSSQLSERVER\\MSSQL\\repldata', 'user', dbo, 'table', 'UIProperties' \nelse \n    EXEC sp_addextendedproperty N'SnapshotFolder', N'C:\\Program Files\\Microsoft SQL Server\\MSSQL16.MSSQLSERVER\\MSSQL\\repldata', 'user', dbo, 'table', 'UIProperties'\nGO\n\nRECONFIGURE\ngo \n\nexec sp_adddistpublisher @publisher = @@SERVERNAME, @distribution_db = N'distribution', @security_mode = 1, @working_directory = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL16.MSSQLSERVER\\MSSQL\\repldata', @trusted = N'false', @thirdparty_flag = 0, @publisher_type = N'MSSQLSERVER'\nGO\n\n\n--- Now let us enable MS-CDC for non primary key tables\n    USE dms_sample;\nGO\n\nEXEC sys.sp_cdc_enable_db\nGO \n\nEXECUTE sys.sp_cdc_enable_table\n    @source_schema = N'dbo',\n    @source_name = N'mlb_data',\n    @role_name = N'dbadmin';\nGO\nEXECUTE sys.sp_cdc_enable_table\n    @source_schema = N'dbo',\n    @source_name = N'nfl_data',\n    @role_name = N'dbadmin';\nGO\nEXECUTE sys.sp_cdc_enable_table\n    @source_schema = N'dbo',\n    @source_name = N'nfl_stadium_data',\n    @role_name = N'dbadmin';\nGO\nEXECUTE sys.sp_cdc_enable_table\n    @source_schema = N'dbo',\n    @source_name = N'corp_customers',\n    @role_name = N'dbadmin';\nGO\nEXECUTE sys.sp_cdc_enable_table\n    @source_schema = N'dbo',\n    @source_name = N'product_sale_regions',\n    @role_name = N'dbadmin';\nGO\nEXECUTE sys.sp_cdc_enable_table\n    @source_schema = N'dbo',\n    @source_name = N'product_sales',\n    @role_name = N'dbadmin';\nGO\nEXECUTE sys.sp_cdc_enable_table\n    @source_schema = N'dbo',\n    @source_name = N'student_results',\n    @role_name = N'dbadmin';\nGO\n\nALTER DATABASE [YoDA] SET RECOVERY FULL WITH NO_WAIT\nGO\n</code></pre>"},{"location":"dms-aws/dms-target.html","title":"DMS Targets","text":""},{"location":"dms-aws/dms-target.html#options","title":"Options","text":"<p>Exists several targets:</p> <ul> <li>Aurora MySQL</li> <li>Aurora PostgreSQL</li> <li>Oracle</li> <li>Microsoft SQL Server</li> <li>S3 (Simple Storage Service)</li> <li>Redshift</li> </ul>"},{"location":"dms-aws/dms-target.html#s3-simple-storage-service","title":"S3 Simple Storage Service","text":""},{"location":"dms-aws/dms-target.html#create-a-dms-replication-instance","title":"Create a DMS Replication Instance","text":"<ul> <li> <p>The process is:</p> <ul> <li>Source Database</li> <li> <p>AWS DMS replication instance</p> </li> <li> <p>Target Database or Amazon S3 or non-database</p> </li> </ul> </li> <li> <p>If you want to create the replication instance:</p> <ul> <li>Name:</li> <li>ARN: Leave blank</li> <li>Description: </li> <li>Instance Class: dms.c5.xlarge</li> <li>Engine Version: Leave the default value</li> <li>High Availability/Multi-AZ: Single AZ</li> <li>Allocated storage GB: 50</li> <li>VPC: </li> <li>Publicly accessible: No/unchecked</li> <li>Advanced -&gt; VPC Security Groups: default</li> </ul> </li> </ul>"},{"location":"dms-aws/dms-target.html#configure-the-target-s3-bucket","title":"Configure the Target S3 Bucket","text":"<ul> <li>The steps are:<ul> <li>Create the bucket with a legible name, for example: <code>dmstagetbucket-janobourian-maxine</code></li> <li>Create <code>dmstargetfolder</code> folder inside the bucket</li> <li>Create a policy to access the bucket <code>DMS-LAB-S3-Access-Policy</code></li> <li>Create the role and associate the policy</li> </ul> </li> </ul> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\",\n                \"s3:DeleteObject\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::dmstagetbucket-janobourian-maxine/*\"\n            ]\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::dmstagetbucket-janobourian-maxine\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"dms-aws/dms-target.html#create-dms-source-and-target-endpoints","title":"Create DMS Source and Target Endpoints","text":"<ul> <li>Create the source endpoint (SQL Server Source)</li> <li>Create the target endpoint for S3 Bucket</li> </ul>"},{"location":"dms-aws/dms-target.html#create-a-dms-migration-task","title":"Create a DMS Migration Task","text":"<ul> <li> <p>The configuration for tasks:</p> <ul> <li>Tasks identifier:</li> <li>Replication instance:</li> <li>Source database endpoint:</li> <li>Target database endpoint:</li> <li>Migration type:<ul> <li>Migrate existing data and replicate ongoing changes</li> </ul> </li> <li>Custom CDC stop mode for source transactions:<ul> <li>Don\u2019t use custom CDC stop mode</li> </ul> </li> <li>Create recovery table on target DB:<ul> <li>leave blank/unchecked</li> </ul> </li> <li>Target table preparation mode:<ul> <li>Do nothing</li> </ul> </li> <li>Stop task after full load completes:<ul> <li>Don't stop</li> </ul> </li> <li>LOB Column settings / Include LOB columns in replication:<ul> <li>Limited LOB mode</li> </ul> </li> <li>Max LOB size (KB)</li> <li>Data validation<ul> <li>Unchecked</li> </ul> </li> <li>Task Logs / Enable CloudWatch logs</li> <li>Log Context</li> <li>Batch-optimized apply if visible</li> </ul> </li> <li> <p>Table mappings:</p> <ul> <li>Wizard</li> </ul> </li> <li> <p>Add new selection rule:</p> <ul> <li>Schema: dbo%</li> <li>Table name: %</li> <li>Action: Include</li> </ul> </li> <li> <p>Transformation rules:</p> <ul> <li>Target: Schema</li> <li>Schema Name: dbo</li> <li>Action: Rename to: dms_sample_dbo</li> </ul> </li> <li> <p>Uncheck Turn on premigration assessment</p> </li> </ul>"},{"location":"dms-aws/dms-target.html#inspect-the-content-in-the-s3-bucket","title":"Inspect the Content in the S3 Bucket","text":"<ul> <li>Check the bucket and folders to validate the information</li> </ul>"},{"location":"dms-aws/dms-target.html#replicate-data-changes","title":"Replicate Data Changes","text":"<ul> <li>Inside the SQL Server executes the script</li> </ul> <pre><code>USE [dms_sample]\nGO\n\nINSERT INTO [dbo].[sport_type]\n           ([name]\n           ,[description])\n     VALUES\n           ('hockey', 'A sport in which two teams play against each other by trying to more a puck into the opponents goal using a hockey stick');\n\nINSERT INTO [dbo].[sport_type]\n           ([name]\n           ,[description])\n     VALUES\n           ('basketball', 'A sport in which two teams of five players each that oppose one another shoot a basketball through the defenders hoop');\n\nINSERT INTO [dbo].[sport_type]\n           ([name]\n           ,[description])\n     VALUES\n           ('soccer','A sport played with a spherical ball between two teams of eleven players');\n\nINSERT INTO [dbo].[sport_type]\n           ([name]\n           ,[description])\n     VALUES\n            ('volleyball','two teams of six players are separated by a net and each team tries to score by grounding a ball on the others court');\n\nINSERT INTO [dbo].[sport_type]\n           ([name]\n           ,[description])\n     VALUES\n           ('cricket','A bat-and-ball game between two teams of eleven players on a field with a wicket at each end');\nGO\n</code></pre>"},{"location":"test_python_cdk_code/index.html","title":"Test Python CDK Code","text":"<p>Learn how to test your Python CDK applications effectively.</p>"},{"location":"test_python_cdk_code/index.html#overview","title":"Overview","text":"<p>Testing strategies and best practices for Python CDK infrastructure code.</p>"},{"location":"test_python_cdk_code/integration_testing.html","title":"Integration Testing","text":"<p>Integration testing approaches for Python CDK applications.</p>"},{"location":"test_python_cdk_code/integration_testing.html#testing-strategy","title":"Testing Strategy","text":"<p>How to implement integration tests for your CDK infrastructure deployments.</p>"},{"location":"test_python_cdk_code/unit_testing.html","title":"Unit Testing","text":"<p>Unit testing strategies for Python CDK applications.</p>"},{"location":"test_python_cdk_code/unit_testing.html#testing-framework","title":"Testing Framework","text":"<p>How to set up and write unit tests for your CDK constructs and stacks.</p>"},{"location":"uv/index.html","title":"UV","text":"<p>This is a quickstart guide</p>"},{"location":"uv/quickstart.html","title":"Quickstart","text":"<p>First of all you maybe want to read the docs: <code>https://docs.astral.sh/uv/</code> </p> <p>In general, you can check the next resource to view more information about every command: <code>https://docs.astral.sh/uv/reference/cli/#uv</code></p>"},{"location":"uv/quickstart.html#init-the-project","title":"Init the project","text":"<pre><code>uv --version\nuv init python-libraries\nuv add ruff\nuv run ruff check\nuv tree\nuv lock\nuv sync\nuv remove ruff\nuv tree\nuv add ruff requests\nuv lock --upgrade-package requests\n</code></pre> <p>You can run scripts with an isolated environment <code>uv run --with rich example.py</code></p>"},{"location":"uv/quickstart.html#alternative-commands","title":"Alternative commands","text":"<p>The next commands are not necessary but, is still necessary to meet them.</p> <pre><code>uv add 'requests==2.31.0'\nuv add git+https://github.com/psf/requests\nuv add -r requirements.txt -c constraints.txt\nuv build\nls dist/\n</code></pre>"},{"location":"uv/quickstart.html#if-you-have-a-requirementstxt-file","title":"If you have a requirements.txt file","text":"<pre><code>uv venv\nuv add -r requirements.txt\n</code></pre>"},{"location":"uv/quickstart.html#docker-configuration","title":"Docker configuration","text":"<pre><code>FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim\n\nWORKDIR /app\n\nENV UV_COMPILE_BYTECODE=1\n\nENV UV_LINK_MODE=copy\n\nRUN --mount=type=cache,target=/root/.cache/uv --mount=type=bind,source=uv.lock,target=uv.lock --mount=type=bind,source=pyproject.toml,target=pyproject.toml uv sync --locked --no-install-project --no-dev\n\nCOPY . /app\nRUN --mount=type=cache,target=/root/.cache/uv uv sync --locked --no-dev\n\nENV PATH=\"/app/.venv/bin:$PATH\"\n\nEXPOSE 8000\nCMD [\"uvicorn\", \"apps.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\", \"--reload\"]\n</code></pre>"}]}